Step 2: Fresh Kubernetes + containerd Setup on Debian (18.04 or later)

1. Common setup on all nodes (Master + Worker)


# Disable swap immediately and permanently
sudo swapoff -a
sudo sed -i '/ swap / s/^/#/' /etc/fstab


# Load required kernel modules
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF


sudo modprobe overlay
sudo modprobe br_netfilter


# Set sysctl params required by Kubernetes
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF


sudo sysctl --system




2. Install container runtime (containerd)


sudo apt-get update


# Install required packages
sudo apt-get install -y ca-certificates curl gnupg lsb-release


# Setup Docker repository (required for containerd)
sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg


echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null


sudo apt-get update


# Install containerd
sudo apt-get install -y containerd.io


# Configure containerd
sudo mkdir -p /etc/containerd
containerd config default | sudo tee /etc/containerd/config.toml


# Edit config to enable systemd cgroup (using sed)
sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml


# Restart containerd
sudo systemctl restart containerd
sudo systemctl enable containerd




3. Install Kubernetes components (kubeadm, kubelet, kubectl)
bash
Copy
Edit






# Add Kubernetes signing key and repo
sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg


echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /" | \
  sudo tee /etc/apt/sources.list.d/kubernetes.list


sudo apt-get update


# Install Kubernetes tools
sudo apt-get install -y kubelet kubeadm kubectl


# Prevent upgrades breaking cluster
sudo apt-mark hold kubelet kubeadm kubectl




4. Master Node only: Initialize Kubernetes cluster


sudo kubeadm init --pod-network-cidr=192.168.0.0/16




5. Set up kubectl for normal user (Master only)


mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
6. Install Calico network plugin (Master only)


kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.0/manifests/calico.yaml
7. Get join command for worker nodes (Master only)

kubeadm token create --print-join-command
8. Worker nodes: Join the cluster (run on each worker node)
bash
Copy
Edit
sudo kubeadm reset -f   # if previously joined


sudo kubeadm join <MASTER_IP>:6443 --token <TOKEN> --discovery-token-ca-cert-hash sha256:<HASH>

Sudo su 
// we user root as a user to connect the ansible machine and kubernatice machine 
// In the root user we have to build two file deployment and services file for deploying over web site on the public ip on internet


Sudo  nano new_news-deployment.yml


apiVersion: apps/v1               # Uses apps/v1 for Deployments
kind: Deployment                  # Declares a Deployment kind
metadata:
  name: news-latest               # Deployment name
  labels:
    app: news-app                 # Label for Deployment metadata


spec:
  replicas: 2                     # Creates 2 pods
  selector:
    matchLabels:
      app: news-app               # Targets pods with label app=news-app


  template:
    metadata:
      labels:
        app: news-app             # Applies this label to pods created
    spec:
      containers:
      - name: news-app
        image: ayushditiss/news_project        # Docker image to use
        imagePullPolicy: Always                # Always pull latest image
        ports:
        - containerPort: 80                    # Container listens on port 80


  strategy:
    type: RollingUpdate                      # Use rolling update strategy
    rollingUpdate:
      maxSurge: 1                            # Allow 1 extra pod during update
      maxUnavailable: 1                      # Allow 1 unavailable pod at a time

Sudo anno news_app-service.yml
apiVersion: v1
kind: Service
metadata:
  name: ansible-server
  labels:
    app: news-app


spec:
  selector:
    app: news-app


  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
    nodePort: 30080


  type: NodePort

// in finally we have to do this finale checks in kubernatice machine 
kubectl get pods
kubectl exec -it <name of the created port>  -- bash
ls -l /usr/share/nginx/html
mv /usr/share/nginx/html/news.html /usr/share/nginx/html/index.html
nginx -s reload

// for using the kubernatis as aws cli than we have to install aws cil command on ec2 instanc e for this we have to build the IAM USER in Aws and configure is over IAM user is 
